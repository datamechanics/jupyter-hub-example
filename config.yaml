proxy:
  # Generate a custom secret for your installation with:
  #
  #   openssl rand -hex 32
  #
  secretToken: ea1a28fc09fff627f32dea783d658707cf8d35f8b98fdd4a98c5a0c8d5ba4920

hub:
  extraConfig:
    # This example displays a form before starting the notebooks server to
    # enter the notebooks gateway URL and the API key used to connect to it
    datamechanicsConfig: |
      from kubespawner import KubeSpawner

      class DataMechanicsKubeSpawner(KubeSpawner):
          def options_from_form(self, form_data):
              options = super().options_from_form(form_data)
              options["gateway_url"] = form_data["gateway_url"][0]
              options["api_key"] = form_data["api_key"][0]
              return options

          async def load_user_options(self):
              await super().load_user_options()
              gateway_url = self.user_options["gateway_url"]
              api_key = self.user_options["api_key"]
              self.args = [
                  f"--gateway-url={gateway_url}",
                  f"--GatewayClient.auth_token={api_key}",
                  "--GatewayClient.request_timeout=600",
              ]
              self.log.info(" ".join(self.args))

      c.JupyterHub.spawner_class = DataMechanicsKubeSpawner
      c.DataMechanicsKubeSpawner.options_form = """
      DataMechanics notebooks gateway <input name="gateway_url" value="https://demo.datamechanics.co/notebooks/" /><br />
      DataMechanics API key <input name="api_key" />
      """
